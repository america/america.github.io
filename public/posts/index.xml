<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on 雑記</title>
    <link>https://america.github.io/posts/</link>
    <description>Recent content in Posts on 雑記</description>
    <generator>Hugo -- 0.139.2</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://america.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWSでSSH接続できない問題を解決した話</title>
      <link>https://america.github.io/posts/aws_ssh_issue_with_system_manager/</link>
      <pubDate>Wed, 27 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://america.github.io/posts/aws_ssh_issue_with_system_manager/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;先日、AWSで立てたEC2インスタンスにSSH接続できなくなる問題が発生しました。このトラブルの原因と解決方法を記録しておきます。同じ状況に陥った方の助けになれば幸いです。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;問題の症状&#34;&gt;問題の症状&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;EC2インスタンスにSSH接続を試みると、&lt;code&gt;Connection timed out&lt;/code&gt; のエラーが表示される。&lt;/li&gt;
&lt;li&gt;AWSコンソール上では、インスタンスは正常に動作中。&lt;/li&gt;
&lt;li&gt;ブラウザからの接続は可能（インスタンス内のApacheは稼働中）。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;トラブルシューティングの進め方&#34;&gt;トラブルシューティングの進め方&lt;/h2&gt;
&lt;p&gt;問題解決のため、まずはSSH接続ができない間もAWS System Managerの「セッションマネージャー」を利用しました。System Managerを活用することで、インスタンスの内部に直接ログインでき、次のような確認や操作が可能になりました：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ファイアウォール（UFW）の状態確認&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ufw status
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SSHサービスの状態確認&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl status ssh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;System Managerは、セキュリティグループやファイアウォールの設定ミスが原因でSSH接続ができなくてもインスタンス内部にアクセスできるため、非常に有用です。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;原因と解決方法&#34;&gt;原因と解決方法&lt;/h2&gt;
&lt;p&gt;調査の結果、以下の4つの原因が考えられました。&lt;/p&gt;
&lt;h3 id=&#34;原因1-セキュリティグループのルール設定ミス&#34;&gt;&lt;strong&gt;原因1: セキュリティグループのルール設定ミス&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;問題点&lt;/strong&gt;&lt;br&gt;
セキュリティグループでポート22（SSH）が許可されていなかった。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解決方法&lt;/strong&gt;&lt;br&gt;
AWSコンソールのセキュリティグループ設定に以下のルールを追加：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;タイプ: SSH&lt;/li&gt;
&lt;li&gt;プロトコル: TCP&lt;/li&gt;
&lt;li&gt;ポート範囲: 22&lt;/li&gt;
&lt;li&gt;ソース: 自分のグローバルIPアドレス（例: &lt;code&gt;203.0.113.0/32&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;原因2-ufwuncomplicated-firewallがポート22を閉じていた&#34;&gt;&lt;strong&gt;原因2: UFW（Uncomplicated Firewall）がポート22を閉じていた&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;問題点&lt;/strong&gt;&lt;br&gt;
EC2インスタンス内のUFW（ローカルファイアウォール）でポート22が閉じられていた。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解決方法&lt;/strong&gt;&lt;br&gt;
以下のコマンドを実行してポート22を許可し、設定を反映しました。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ufw allow &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ufw reload
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;原因3-グローバルipの変動&#34;&gt;&lt;strong&gt;原因3: グローバルIPの変動&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;問題点&lt;/strong&gt;&lt;br&gt;
自分のグローバルIPアドレスが変更されたことで、セキュリティグループのルールが機能しなくなった。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解決方法&lt;/strong&gt;&lt;br&gt;
新しいグローバルIPを確認し、セキュリティグループのSSHルールを更新しました。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl ifconfig.me
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;原因4-インターネットゲートウェイの設定ミス&#34;&gt;&lt;strong&gt;原因4: インターネットゲートウェイの設定ミス&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;問題点&lt;/strong&gt;&lt;br&gt;
インターネットゲートウェイがVPCに正しくアタッチされていなかった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>BluetoothデバイスをWindowsとLinuxで切り替える際のトラブルと解決方法</title>
      <link>https://america.github.io/posts/my-second-post/</link>
      <pubDate>Tue, 26 Nov 2024 00:56:08 +0900</pubDate>
      <guid>https://america.github.io/posts/my-second-post/</guid>
      <description>&lt;h2 id=&#34;問題の背景&#34;&gt;問題の背景&lt;/h2&gt;
&lt;p&gt;Bluetoothヘッドホンを&lt;strong&gt;Windows&lt;/strong&gt;で接続した後、**Linux（例: Arch Linux）**に切り替えると、ヘッドホンがうまく接続できないことがあります。この問題の原因は、&lt;strong&gt;Bluetoothのペアリング情報がOSごとに管理され、競合が発生するため&lt;/strong&gt;です。&lt;/p&gt;
&lt;p&gt;この記事では、トラブルの原因を解説し、具体的な解決策を2つ提案します。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;問題の原因&#34;&gt;問題の原因&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bluetoothペアリング情報の競合&lt;/strong&gt;&lt;br&gt;
Bluetoothヘッドホンは、ホストデバイス（PCやスマートフォン）との暗号化されたリンクキーを使用して認証を行います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windowsではリンクキーがレジストリに保存されます。&lt;/li&gt;
&lt;li&gt;Linuxではリンクキーが&lt;code&gt;/var/lib/bluetooth/&lt;/code&gt;ディレクトリに保存されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OSごとに異なるリンクキーを使用するため、OSを切り替えると認証に失敗し、接続エラーが発生します。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解決のための再ペアリング&lt;/strong&gt;&lt;br&gt;
問題を解決するために、Linuxで&lt;code&gt;bluetoothctl&lt;/code&gt;を使ってデバイスを&lt;code&gt;remove&lt;/code&gt;し、再ペアリングする必要が出てきます。これにより、新しいリンクキーが生成され、再接続が可能になります。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;解決方法&#34;&gt;解決方法&lt;/h2&gt;
&lt;p&gt;以下の2つの解決方法を提案します。&lt;/p&gt;
&lt;h3 id=&#34;方法-1-bluetooth設定を完全に個別管理する&#34;&gt;方法 1: Bluetooth設定を完全に個別管理する&lt;/h3&gt;
&lt;p&gt;WindowsとLinuxでペアリング情報が競合しないように、Bluetoothデバイスを個別に管理します。&lt;/p&gt;
&lt;h4 id=&#34;11-bluetoothアダプタのmacアドレスを変更する&#34;&gt;1.1 BluetoothアダプタのMACアドレスを変更する&lt;/h4&gt;
&lt;p&gt;Linux側でMACアドレスを変更し、ヘッドホンに異なるペアリング情報を記憶させることで、Windowsのペアリング情報との競合を回避します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Bluetoothアダプタを停止&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo hciconfig hci0 down
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# MACアドレスを変更&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo btmgmt --index &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; public-addr XX:XX:XX:XX:XX:XX
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Bluetoothアダプタを再起動&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo hciconfig hci0 up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;XX:XX:XX:XX:XX:XX&lt;/code&gt;には新しいMACアドレスを指定してください。&lt;/li&gt;
&lt;li&gt;その後、ヘッドホンを再ペアリングします。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;12-異なるbluetoothアダプタを使用する&#34;&gt;1.2 異なるBluetoothアダプタを使用する&lt;/h4&gt;
&lt;p&gt;WindowsとLinuxで異なるBluetoothアダプタ（例: USBドングル）を使用する方法も有効です。これにより、ヘッドホンは2つの異なるデバイスとして認識します。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;方法-2-bluetooth設定をos間で同期する&#34;&gt;方法 2: Bluetooth設定をOS間で同期する&lt;/h3&gt;
&lt;p&gt;Tailscaleのようなツールを使って、WindowsとLinuxでBluetooth設定を共有します。&lt;/p&gt;
&lt;h4 id=&#34;21-必要な設定ファイルの場所&#34;&gt;2.1 必要な設定ファイルの場所&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;:&lt;br&gt;
Bluetoothリンクキーは以下のレジストリパスに保存されています。&lt;br&gt;
&lt;code&gt;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\BTHPORT\Parameters\Keys&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;:&lt;br&gt;
Bluetoothリンクキーは以下に保存されています。&lt;br&gt;
&lt;code&gt;/var/lib/bluetooth/[アダプタMAC]/[デバイスMAC]/info&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;22-tailscaleを使った同期手順&#34;&gt;2.2 Tailscaleを使った同期手順&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tailscaleをインストールする&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Arch Linux&lt;/strong&gt;:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo pacman -S tailscale
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo tailscale up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;:
&lt;a href=&#34;https://tailscale.com/&#34;&gt;Tailscale公式サイト&lt;/a&gt;からインストーラーをダウンロードしてインストールします。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;リンクキーをエクスポートする&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>First Post</title>
      <link>https://america.github.io/posts/first-post/</link>
      <pubDate>Wed, 20 Nov 2024 23:47:31 +0900</pubDate>
      <guid>https://america.github.io/posts/first-post/</guid>
      <description>&lt;h1 id=&#34;awsでlamp環境を構築したけれど&#34;&gt;AWSでLAMP環境を構築したけれど…&lt;/h1&gt;
&lt;p&gt;最近、AWS上でLAMP環境を構築し、WordPressを立ち上げました。これ自体は、これまでの経験を活かして比較的スムーズに進めることができました。EC2のインスタンスを用意し、Apacheを設定し、MySQLとPHPを組み合わせて、ようやくWordPressのインストールにこぎつけました。&lt;br&gt;
WordPressのダッシュボードを初めて開いたときには、達成感がありました。「これで理想のブログができる」と思ったのです。しかし、その後、運用をイメージし始めたとき、徐々に違和感が生じてきました。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;wordpressで感じた違和感&#34;&gt;WordPressで感じた違和感&lt;/h1&gt;
&lt;p&gt;WordPressは確かに便利で多機能です。しかし、カスタマイズしようと思うとプラグインの選定やセキュリティ対策に多くの時間を費やす必要があります。そして、定期的なアップデートの管理、MySQLのバックアップ、万が一のトラブル時の復旧作業…これらが少しずつ重くのしかかってきました。&lt;br&gt;
ブログ運営は長期戦です。構築そのものに時間をかけすぎるのではなく、記事の執筆や情報発信にもっと時間を使いたい。そう思い始めると、WordPressは少し「重たい」と感じるようになりました。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;静的サイトジェネレーターとの出会い&#34;&gt;静的サイトジェネレーターとの出会い&lt;/h1&gt;
&lt;p&gt;そんな中で目にしたのが、静的サイトジェネレーターの存在です。特にHugoのシンプルさや高速性には興味を惹かれました。さらに、GitHub Pagesを利用すれば無料でホスティングでき、運用コストを大幅に削減できることに気づいたのです。&lt;/p&gt;
&lt;p&gt;Hugoで生成される静的サイトは、セキュリティリスクも少なく、更新もGitの操作だけで完結します。「これなら、より気軽にブログを運営できるかもしれない」と思い、試しにローカル環境でHugoを導入してみました。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;github-pages--hugoへの移行を決断&#34;&gt;GitHub Pages + Hugoへの移行を決断&lt;/h1&gt;
&lt;p&gt;Hugoを使ってサイトを構築してみると、その軽さとスピード感に驚きました。Markdownで記事を書き、コマンド一つでサイトを生成。そして、そのファイルをGitHubにプッシュするだけで公開できる。このシンプルさに感動しました。&lt;/p&gt;
&lt;p&gt;最初は「WordPressで構築したものを捨てるのはもったいない」と葛藤しました。しかし、将来を見据えたとき、運用の手軽さが何よりも重要だと判断し、GitHub Pages + Hugoに移行することを決断しました。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;結論ブログ運営における最適解とは&#34;&gt;結論：ブログ運営における最適解とは？&lt;/h1&gt;
&lt;p&gt;AWSでのLAMP環境構築やWordPressの設定は、確かに学びの多い経験でした。しかし、それ以上に「どんな形でブログを運営したいのか」を考える貴重な機会にもなりました。&lt;/p&gt;
&lt;p&gt;今、私はHugoとGitHub Pagesでブログを運営しています。そのシンプルさと自由度の高さに満足しながら、これから記事を増やしていくつもりです。&lt;/p&gt;
&lt;p&gt;もし、ブログの運営方法で悩んでいる方がいれば、「自分にとって最適な運用方法は何か？」をぜひ考えてみてください。決して、簡単にたどり着ける答えではありませんが、その過程で得られる学びは大きいものです。&lt;/p&gt;
&lt;hr&gt;</description>
    </item>
  </channel>
</rss>
