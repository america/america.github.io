<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>雑記</title><link>https://america.github.io/</link><description>Recent content on 雑記</description><generator>Hugo -- 0.140.0</generator><language>ja</language><lastBuildDate>Wed, 27 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://america.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>AWSでSSH接続できない問題を解決した話</title><link>https://america.github.io/posts/aws_ssh_issue_with_system_manager/</link><pubDate>Wed, 27 Nov 2024 00:00:00 +0000</pubDate><guid>https://america.github.io/posts/aws_ssh_issue_with_system_manager/</guid><description>&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;p>先日、AWSで立てたEC2インスタンスにSSH接続できなくなる問題が発生しました。このトラブルの原因と解決方法を記録しておきます。同じ状況に陥った方の助けになれば幸いです。&lt;/p>
&lt;hr>
&lt;h2 id="問題の症状">問題の症状&lt;/h2>
&lt;ul>
&lt;li>EC2インスタンスにSSH接続を試みると、&lt;code>Connection timed out&lt;/code> のエラーが表示される。&lt;/li>
&lt;li>AWSコンソール上では、インスタンスは正常に動作中。&lt;/li>
&lt;li>ブラウザからの接続は可能（インスタンス内のApacheは稼働中）。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="トラブルシューティングの進め方">トラブルシューティングの進め方&lt;/h2>
&lt;p>問題解決のため、まずはSSH接続ができない間もAWS System Managerの「セッションマネージャー」を利用しました。System Managerを活用することで、インスタンスの内部に直接ログインでき、次のような確認や操作が可能になりました：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>ファイアウォール（UFW）の状態確認&lt;/strong>&lt;/p>
&lt;div class="codeblock-wrapper">
&lt;pre>
&lt;code id="codeblock-0" class="language-bash">sudo ufw status&lt;/code>
&lt;/pre>
&lt;button class="copy-btn" onclick="copyToClipboard('codeblock-0', this)">Copy&lt;/button>
&lt;script>
function copyToClipboard(id, button) {
const codeBlock = document.getElementById(id);
if (!codeBlock) return;
const text = codeBlock.textContent.replace(/^\$\s/gm, "");
navigator.clipboard.writeText(text).then(() => {
button.textContent = "Copied!";
}).catch(err => {
console.error("Failed to copy: ", err);
});
}
&lt;/script>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>SSHサービスの状態確認&lt;/strong>&lt;/p>
&lt;div class="codeblock-wrapper">
&lt;pre>
&lt;code id="codeblock-1" class="language-bash">sudo systemctl status ssh&lt;/code>
&lt;/pre>
&lt;button class="copy-btn" onclick="copyToClipboard('codeblock-1', this)">Copy&lt;/button>
&lt;script>
function copyToClipboard(id, button) {
const codeBlock = document.getElementById(id);
if (!codeBlock) return;
const text = codeBlock.textContent.replace(/^\$\s/gm, "");
navigator.clipboard.writeText(text).then(() => {
button.textContent = "Copied!";
}).catch(err => {
console.error("Failed to copy: ", err);
});
}
&lt;/script>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;p>System Managerは、セキュリティグループやファイアウォールの設定ミスが原因でSSH接続ができなくてもインスタンス内部にアクセスできるため、非常に有用です。&lt;/p></description></item><item><title>Test Post</title><link>https://america.github.io/posts/my-second-post/</link><pubDate>Tue, 26 Nov 2024 00:56:08 +0900</pubDate><guid>https://america.github.io/posts/my-second-post/</guid><description>&lt;div class="codeblock-wrapper">
&lt;pre>
&lt;code id="codeblock-0" class="language-bash">echo "Hello, World!"&lt;/code>
&lt;/pre>
&lt;button class="copy-btn" onclick="copyToClipboard('codeblock-0', this)">Copy&lt;/button>
&lt;script>
function copyToClipboard(id, button) {
const codeBlock = document.getElementById(id);
if (!codeBlock) return;
const text = codeBlock.textContent.replace(/^\$\s/gm, "");
navigator.clipboard.writeText(text).then(() => {
button.textContent = "Copied!";
}).catch(err => {
console.error("Failed to copy: ", err);
});
}
&lt;/script>
&lt;/div></description></item><item><title>First Post</title><link>https://america.github.io/posts/first-post/</link><pubDate>Wed, 20 Nov 2024 23:47:31 +0900</pubDate><guid>https://america.github.io/posts/first-post/</guid><description>&lt;h1 id="awsでlamp環境を構築したけれど">AWSでLAMP環境を構築したけれど…&lt;/h1>
&lt;p>最近、AWS上でLAMP環境を構築し、WordPressを立ち上げました。これ自体は、これまでの経験を活かして比較的スムーズに進めることができました。EC2のインスタンスを用意し、Apacheを設定し、MySQLとPHPを組み合わせて、ようやくWordPressのインストールにこぎつけました。&lt;/p>
&lt;p>WordPressのダッシュボードを初めて開いたときには、達成感がありました。「これで理想のブログができる」と思ったのです。しかし、その後、運用をイメージし始めたとき、徐々に違和感が生じてきました。&lt;/p>
&lt;hr>
&lt;h1 id="wordpressで感じた違和感">WordPressで感じた違和感&lt;/h1>
&lt;p>WordPressは確かに便利で多機能です。しかし、カスタマイズしようと思うとプラグインの選定やセキュリティ対策に多くの時間を費やす必要があります。そして、定期的なアップデートの管理、MySQLのバックアップ、万が一のトラブル時の復旧作業…これらが少しずつ重くのしかかってきました。&lt;/p>
&lt;p>ブログ運営は長期戦です。構築そのものに時間をかけすぎるのではなく、記事の執筆や情報発信にもっと時間を使いたい。そう思い始めると、WordPressは少し「重たい」と感じるようになりました。&lt;/p>
&lt;hr>
&lt;h1 id="静的サイトジェネレーターとの出会い">静的サイトジェネレーターとの出会い&lt;/h1>
&lt;p>そんな中で目にしたのが、静的サイトジェネレーターの存在です。特にHugoのシンプルさや高速性には興味を惹かれました。さらに、GitHub Pagesを利用すれば無料でホスティングでき、運用コストを大幅に削減できることに気づいたのです。&lt;/p>
&lt;p>Hugoで生成される静的サイトは、セキュリティリスクも少なく、更新もGitの操作だけで完結します。「これなら、より気軽にブログを運営できるかもしれない」と思い、試しにローカル環境でHugoを導入してみました。&lt;/p>
&lt;hr>
&lt;h1 id="github-pages--hugoへの移行を決断">GitHub Pages + Hugoへの移行を決断&lt;/h1>
&lt;p>Hugoを使ってサイトを構築してみると、その軽さとスピード感に驚きました。Markdownで記事を書き、コマンド一つでサイトを生成。そして、そのファイルをGitHubにプッシュするだけで公開できる。このシンプルさに感動しました。&lt;/p>
&lt;p>最初は「WordPressで構築したものを捨てるのはもったいない」と葛藤しました。しかし、将来を見据えたとき、運用の手軽さが何よりも重要だと判断し、GitHub Pages + Hugoに移行することを決断しました。&lt;/p>
&lt;hr>
&lt;h1 id="結論ブログ運営における最適解とは">結論：ブログ運営における最適解とは？&lt;/h1>
&lt;p>AWSでのLAMP環境構築やWordPressの設定は、確かに学びの多い経験でした。しかし、それ以上に「どんな形でブログを運営したいのか」を考える貴重な機会にもなりました。&lt;/p>
&lt;p>今、私はHugoとGitHub Pagesでブログを運営しています。そのシンプルさと自由度の高さに満足しながら、これから記事を増やしていくつもりです。&lt;/p>
&lt;p>もし、ブログの運営方法で悩んでいる方がいれば、「自分にとって最適な運用方法は何か？」をぜひ考えてみてください。決して、簡単にたどり着ける答えではありませんが、その過程で得られる学びは大きいものです。&lt;/p>
&lt;hr></description></item></channel></rss>